// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String     @id @default(uuid())
  name       String
  user_id    String
  providers  Provider[] @relation("StoreToProvider")
  categories Category[] @relation("StoreToCategory")
  clients    Client[]   @relation("StoreToClient")
  products   Product[]  @relation("StoreToProduct")
  orders     Order[]    @relation("StoreToOrder")
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Provider {
  id         String    @id @default(uuid())
  name       String
  phone      String
  email      String
  store_id   String
  products   Product[]
  // categories Category[]
  store      Store     @relation("StoreToProvider", fields: [store_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([store_id])
}

model Client {
  id          String   @id @default(uuid())
  full_name   String
  dni         String?
  phone       String?
  email       String?
  country     String?
  state       String?
  city        String?
  address     String?
  postal_code String?
  store_id    String
  store       Store    @relation("StoreToClient", fields: [store_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([store_id])
}

model Category {
  id         String    @id @default(uuid())
  name       String
  store_id   String
  // provider_id String
  sizes      Size[]    @relation("CategoryToSize")
  products   Product[] @relation("CategoryToProduct")
  // provider    Provider  @relation(fields: [provider_id], references: [id])
  store      Store     @relation("StoreToCategory", fields: [store_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  // @@index([provider_id])

  @@index([store_id])
}

model Size {
  id          String    @id @default(uuid())
  value       String
  name        String
  category_id String
  products    Product[]
  category    Category  @relation("CategoryToSize", fields: [category_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([category_id])
}

model Product {
  id              String          @id @default(uuid())
  name            String
  price           Decimal
  stock           Int
  description     String?
  is_archived     Boolean         @default(false)
  store_id        String
  category_id     String
  size_id         String
  provider_id     String
  images          Image[]
  products_orders Product_Order[]
  store           Store           @relation("StoreToProduct", fields: [store_id], references: [id])
  category        Category        @relation("CategoryToProduct", fields: [category_id], references: [id])
  size            Size            @relation(fields: [size_id], references: [id])
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  provider        Provider        @relation(fields: [provider_id], references: [id])

  @@index([store_id])
  @@index([category_id])
  @@index([size_id])
  @@index([provider_id])
}

model Image {
  id         String   @id @default(uuid())
  url        String
  product_id String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([product_id])
}

model Order {
  id              String          @id @default(uuid())
  store_id        String
  products_orders Product_Order[]
  is_paid         Boolean         @default(false)
  phone           String          @default("")
  address         String          @default("")
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  store           Store           @relation("StoreToOrder", fields: [store_id], references: [id])

  @@index([store_id])
}

//INTERMEDIATE TABLE
model Product_Order {
  id         String  @id @default(uuid())
  order_id   String
  product_id String
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@index([order_id])
  @@index([product_id])
}
